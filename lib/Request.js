// Generated by CoffeeScript 2.7.0
var Request, each;

each = require('each');

module.exports = Request = class Request {
  constructor(shell, command) {
    this.shell = shell;
    this.command = command;
  }

  /*
  Ask one or more questions
  */
  question(questions, callback) {
    var answers, isObject, multiple, q, v;
    isObject = function(v) {
      return typeof v === 'object' && (v != null) && !Array.isArray(v);
    };
    multiple = true;
    answers = {};
    if (isObject(questions)) {
      questions = (function() {
        var results;
        results = [];
        for (q in questions) {
          v = questions[q];
          if (v == null) {
            v = {};
          }
          if (!isObject(v)) {
            v = {
              value: v
            };
          }
          v.name = q;
          results.push(v);
        }
        return results;
      })();
    } else if (typeof questions === 'string') {
      multiple = false;
      questions = [
        {
          name: questions,
          value: ''
        }
      ];
    }
    return each(questions).call((question, next) => {
      q = `${question.name} `;
      if (question.value) {
        q += `[${question.value}] `;
      }
      return this.shell.interface().question(q, function(answer) {
        if (answer.substr(-1, 1) === '\n') {
          answer = answer.substr(0, answer.length - 1);
        }
        answers[question.name] = answer === '' ? question.value : answer;
        return next();
      });
    }).next(function() {
      if (!multiple) {
        answers = answers[questions[0].name];
      }
      return callback(answers);
    });
  }

  /*
  Ask a question expecting a boolean answer
  */
  confirm(msg, defaultTrue, callback) {
    var args, base, base1, keyFalse, keyTrue, key_false, key_true, question;
    args = arguments;
    if (!callback) {
      callback = defaultTrue;
      defaultTrue = true;
    }
    if ((base = this.shell.settings).key_true == null) {
      base.key_true = 'y';
    }
    if ((base1 = this.shell.settings).key_false == null) {
      base1.key_false = 'n';
    }
    key_true = this.shell.settings.key_true.toLowerCase();
    key_false = this.shell.settings.key_false.toLowerCase();
    keyTrue = defaultTrue ? key_true.toUpperCase() : key_true;
    keyFalse = defaultTrue ? key_false : key_false.toUpperCase();
    msg += ' ';
    msg += `[${keyTrue}${keyFalse}] `;
    question = this.shell.styles.raw(msg, {
      color: 'green'
    });
    return this.shell.interface().question(question, (answer) => {
      var accepted, valid;
      accepted = ['', key_true, key_false];
      if (answer.substr(-1, 1) === '\n') {
        answer = answer.substr(0, answer.length - 1);
      }
      answer = answer.toLowerCase();
      valid = accepted.indexOf(answer) !== -1;
      if (!valid) {
        return this.confirm.apply(this, args);
      }
      return callback(answer === key_true || (defaultTrue && answer === ''));
    });
  }

};
